# Import necessary libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.cluster import KMeans
from sklearn import datasets

# Load the Iris dataset
iris = datasets.load_iris()
data = pd.DataFrame(iris.data, columns=iris.feature_names)

# Explore the dataset
print(data.head())

# Finding the optimum number of clusters using the Elbow Method
sse = []  # Sum of Squared Errors

# Trying k values from 1 to 10
for k in range(1, 11):
    kmeans = KMeans(n_clusters=k, random_state=42)
    kmeans.fit(data)
    sse.append(kmeans.inertia_)

# Plotting the Elbow curve
plt.figure(figsize=(12, 4))

# Elbow Method Plot
plt.subplot(1, 2, 1)
plt.plot(range(1, 11), sse, marker='o')
plt.title('Elbow Method for Optimal k')
plt.xlabel('Number of Clusters (k)')
plt.ylabel('Sum of Squared Errors (SSE)')

# Apply KMeans clustering with the selected k
optimal_k = 3
kmeans = KMeans(n_clusters=optimal_k, random_state=42)
data['cluster'] = kmeans.fit_predict(data)

# Visualize the clusters in 2D using the first two features
plt.subplot(1, 2, 2)
plt.scatter(data['sepal length (cm)'], data['sepal width (cm)'], c=data['cluster'], cmap='viridis', edgecolors='k')
plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='X', label='Centroids')
plt.title('KMeans Clustering (k=3) - Iris Dataset')
plt.xlabel('Sepal Length (cm)')
plt.ylabel('Sepal Width (cm)')
plt.legend()
plt.show()

# Pair plot for detailed feature analysis
sns.pairplot(data, hue='cluster', palette='viridis')
plt.suptitle('Pair Plot for KMeans Clustering (k=3) - Iris Dataset', y=1.02)
plt.show()
